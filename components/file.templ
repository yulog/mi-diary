package components

import (
	"github.com/yulog/mi-diary/domain/model"
	"strings"
)

type File struct {
	Title          string
	Profile        string
	Host           string
	FileFilterPath string
	Items          []model.File
}

templ modalButtonStyle() {
	<style type="text/css">
		.card {
			position: relative;
		}
		.js-modal-trigger {
			position: absolute;
			bottom: 5px;
			right: 5px;
		}
	</style>
}

templ (n File) WithPage() {
	@BaseWithNav(n.Title, n.Profile) {
		@fileList(n.Host, n.Items)
	}
}

templ (n File) WithPages(p Pages) {
	@BaseWithNav(n.Title, n.Profile) {
		@FileFilterBar(n.FileFilterPath, p.QueryParams.Color)
		@Pagination(p) {
			@fileList(n.Host, n.Items)
		}
	}
}

// SQLite は日時をUTCで保持する
templ fileList(host string, items []model.File) {
	@lightboxStyle()
	@modalButtonStyle()
	<div class={ "grid", grid() }>
		for _,file := range items {
			<div class={ "cell", cell() }>
				<div class="card">
					switch  {
						case strings.HasPrefix(file.Type, "image/"):
							@cardImage(file)
						default:
							@cardPlaceholder(file)
					}
					<button class="button is-text js-modal-trigger" data-target={ "modal-" + file.FileID }>
						…
					</button>
					for _, note := range file.Notes {
						<div id={ "modal-" + file.FileID } class="modal">
							<div class="modal-background"></div>
							<div class="modal-content">
								@Card() {
									@noteContent(host, note)
								}
							</div>
							<button class="modal-close is-large" aria-label="close"></button>
						</div>
					}
				</div>
			</div>
		}
	</div>
	@lightboxScript()
	<script type="text/javascript">
		// https://bulma.io/documentation/components/modal/#javascript-implementation-example
		// document.addEventListener('DOMContentLoaded', () => {
		htmx.onLoad(function(content) {
			// Functions to open and close a modal
			function openModal($el) {
				$el.classList.add('is-active');
			}

			function closeModal($el) {
				$el.classList.remove('is-active');
			}

			function closeAllModals() {
				(document.querySelectorAll('.modal') || []).forEach(($modal) => {
				closeModal($modal);
				});
			}

			// Add a click event on buttons to open a specific modal
			(document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
				const modal = $trigger.dataset.target;
				const $target = document.getElementById(modal);

				$trigger.addEventListener('click', () => {
				openModal($target);
				});
			});

			// Add a click event on various child elements to close the parent modal
			(document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach(($close) => {
				const $target = $close.closest('.modal');

				$close.addEventListener('click', () => {
				closeModal($target);
				});
			});

			// Add a keyboard event to close all modals
			document.addEventListener('keydown', (event) => {
				if(event.key === "Escape") {
				closeAllModals();
				}
			});
		});
	</script>
}
