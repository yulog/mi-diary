package components

import (
	"github.com/cenkalti/dominantcolor"
	"github.com/yulog/mi-diary/color"
	"github.com/yulog/mi-diary/internal/shared"
)

templ SearchBar(path, s string) {
	if path != "" {
		<div class="block">
			<div class="field has-addons has-addons-centered">
				<div class="control is-expanded">
					<input name="s" class="input is-rounded is-primary" type="text" placeholder="Search" value={ s }/>
				</div>
				<div class="control">
					<button hx-get={ templ.URL(path) } hx-include="[name='s']" hx-target="body" hx-swap="outerHTML" hx-trigger="click, keyup[key=='Enter'] from:input[name='s']" hx-push-url="true" class="button is-rounded is-primary">Go</button>
				</div>
			</div>
		</div>
	}
}

func getColorQuery(color string) string {
	q := shared.QueryParams{
		Page:  1,
		Color: color,
	}
	return q.GetQuery()
}

templ FileFilterBar(path string, currentColor string) {
	if path != "" {
		<style type="text/css">
			span.color-palette {
				border-radius: .25rem;
				min-height: 1.5rem;
				min-width: 1.5rem;
			}
		</style>
		<div class="block">
			<div class="field has-addons has-addons-centered">
				<div class="buttons">
					@PaletteClearButton("")
					for _,color := range color.DefinedColors {
						@PaletteButton(dominantcolor.Hex(*color), currentColor)
					}
				</div>
			</div>
		</div>
	}
}

templ PaletteClearButton(currentColor string) {
	<a href={ getColorQuery("") } class="button">
		<span class="icon is-small">
			<span class={ "color-palette", PaletteClearClass() }></span>
		</span>
	</a>
}

templ PaletteButton(color, currentColor string) {
	if color == currentColor {
		<a class="button is-static">
			<span class="icon is-small">
				<span class={ "color-palette", PaletteClass(color) }></span>
			</span>
		</a>
	} else {
		<a href={ getColorQuery(color) } class="button">
			<span class="icon is-small">
				<span class={ "color-palette", PaletteClass(color) }></span>
			</span>
		</a>
	}
}

css PaletteClass(color string) {
	background-color: { color };
}

// https://ics.media/entry/18966/

css PaletteClearClass() {
	background-image: conic-gradient(
    hsl(0, 100%, 50%) 0,
    hsl(90, 100%, 50%) 90deg,
    hsl(180, 100%, 50%) 180deg,
    hsl(270, 100%, 50%) 270deg,
    hsl(360, 100%, 50%) 360deg
  );
}
